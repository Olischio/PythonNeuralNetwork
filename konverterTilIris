import numpy as np

class NeuralNetwork():

    def __init__(self):
        np.random.seed(1)

        self.synaptic_weights = 2 * np.random.random((4, 1)) - 1
    
    def sigmoid(self, x):
        return 1 / (1 + np.exp(-x))

    def sigmoid_derivative(self, x):
        return x * (1 - x)

    def train(self, training_inputs, training_outputs, training_iterations):

        for iteration in range (training_iterations):

            output = self.think(training_inputs)
            error = training_outputs - output
            adjustments = np.dot(training_inputs.T, error * self.sigmoid_derivative(output))
            self.synaptic_weights += adjustments

    def think(self, inputs):

        inputs = inputs.astype(float)
        output = self.sigmoid(np.dot(inputs, self.synaptic_weights))

        return output

if __name__ == "__main__":

    neural_network = NeuralNetwork()

    print("Random synaptic weights: ")
    print(neural_network.synaptic_weights)

    # training_inputs = np.array([[5,3,1], 
    #                             [4,3,1],
    #                             [4,3,1],
    #                             [4,3,1],
    #                             [5,3,1],
    #                             [7,3,4],
    #                             [6,3,4],
    #                             [6,3,4],
    #                             [5,2,4],
    #                             [6,2,4]])

    # training_inputs = np.array([[5.1,3.5,1.4,0.2], 
    #                             [4.9,3.0,1.4,0.2],
    #                             [4.7,3.2,1.3,0.2],
    #                             [4.6,3.1,1.5,0.2],
    #                             [5.0,3.6,1.4,0.2],
    #                             # [1.0,1.0,1.0,1.0],
    #                             # debug purposes
    #                             # add ekstra 0 og 1 i training_outputs

    #                             [7.0,3.2,4.7,1.4],
    #                             [6.4,3.2,4.5,1.5],
    #                             [6.9,3.1,4.9,1.5],
    #                             [5.5,2.3,4.0,1.3],
    #                             [6.5,2.8,4.6,1.5],
    #                             # [0.0,0.0,0.0,0.0]
    #                             # debug purposes
    #                             ])

    training_inputs = np.array([
                                # Iris setosa
                                [5.1,3.5,1.4,0.2], 
                                [4.9,3.0,1.4,0.2],
                                [4.7,3.2,1.3,0.2],
                                [4.6,3.1,1.5,0.2],
                                [5.0,3.6,1.4,0.2],

                                [4.4,2.9,1.4,0.2],
                                [4.9,3.1,1.5,0.1],
                                [5.4,3.7,1.5,0.2],
                                [4.8,3.4,1.6,0.2],
                                [4.8,3.8,1.4,0.1],

                                [4.3,3.0,1.1,0.1],
                                [4.3,3.0,1.1,0.1],
                                [5.8,4.0,1.2,0.2],
                                [5.7,4.4,1.5,0.4],
                                [5.4,3.9,1.3,0.4],
                                # [1.0,1.0,1.0,1.0],
                                # debug purposes
                                # add ekstra 0 og 1 i training_outputs

                                # Iris versicolor
                                [7.0,3.2,4.7,1.4],
                                [6.4,3.2,4.5,1.5],
                                [6.9,3.1,4.9,1.5],
                                [5.5,2.3,4.0,1.3],
                                [6.5,2.8,4.6,1.5],

                                [5.7,2.8,4.5,1.3],
                                [6.3,3.3,4.7,1.6],
                                [4.9,2.4,3.3,1.0],
                                [6.6,2.9,4.6,1.3],
                                [5.2,2.7,3.9,1.4],

                                [5.0,2.0,3.5,1.0],
                                [5.9,3.0,4.2,1.5],
                                [6.0,2.2,4.0,1.0],
                                [6.1,2.9,4.7,1.4],
                                [5.6,2.9,3.6,1.3],

                                # [0.0,0.0,0.0,0.0]
                                # debug purposes
                                ])
                            
    training_outputs = np.array([[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]).T

    neural_network.train(training_inputs, training_outputs, 10000)

    print("Synaptic weights after training: ")
    print(neural_network.synaptic_weights)

    A = str(input("Input 1: "))
    B = str(input("Input 2: "))
    C = str(input("Input 3: "))
    D = str(input("Input 4: "))

    print("New situation: input data = ", A, B, C, D)
    print("Output data : ")
    print(neural_network.think(np.array([A, B, C, D])))